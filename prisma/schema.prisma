// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String          @unique
  password      String
  customer_id   String?         @unique
  isPremium     Boolean         @default(false)
  address       Address?        @relation(fields: [addressId], references: [id])
  addressId     String?         @unique
  messages      Message[]
  card_token    String?         @unique
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  UsersOnChats  UsersOnChats[]
  Chat          Chat[]
  PaymentMethod PaymentMethod[]

  @@map("users")
}

model Chat {
  id           String         @id @default(uuid())
  name         String         @unique
  user         User           @relation(fields: [owner_id], references: [id])
  owner_id     String
  messages     Message[]
  created_at   DateTime       @default(now())
  UsersOnChats UsersOnChats[]

  @@map("chats")
}

model UsersOnChats {
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([chatId, userId])
}

model Message {
  id     String   @id @default(uuid())
  chat   Chat     @relation(fields: [chatId], references: [id])
  chatId String
  text   String
  user   User     @relation(fields: [userId], references: [id])
  userId String
  sentAt DateTime @default(now())

  @@map("messages")
}

model Address {
  id          String   @id @default(uuid())
  city        String
  country     String
  line1       String
  postal_code String
  state       String
  created_at  DateTime @default(now())
  User        User?

  @@map("addresses")
}

model PaymentMethod {
  id                       String   @id @default(uuid())
  user                     User?    @relation(fields: [userId], references: [id])
  userId                   String?
  stripe_payment_method_id String
  created_at               DateTime @default(now())

  @@map("paymentmethods")
}
